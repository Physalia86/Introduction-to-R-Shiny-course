[
  {
    "objectID": "README.html",
    "href": "README.html",
    "title": "Introduction to R Shiny",
    "section": "",
    "text": "Overview\nStrictly speaking, Shiny is an R package; however, it surpasses this classification. It stands as a framework that empowers R users to craft sophisticated, responsive web applications, even with a modest grasp of web development. But why do we consider it a framework? The reason lies in the multitude of packages that expand Shiny’s functionality, enabling the execution of intricate processes. Moreover, this ecosystem continues to expand daily. To fully harness the capabilities of Shiny, one must grasp its fundamental principles. In this workshop, we will delve deeply into these concepts. By the conclusion of the session, you will be well-equipped to confidently create web applications directly from within R.",
    "crumbs": [
      "About the course"
    ]
  },
  {
    "objectID": "README.html#target-audience",
    "href": "README.html#target-audience",
    "title": "Introduction to R Shiny",
    "section": "Target Audience",
    "text": "Target Audience\nThis workshop is targeting a broad audience:\n\nData Analysts\n\nData Scientists\n\nResearchers\n\nBiologists\n\nEconomists\n\nAmong others. These participants all share the benefit of enhanced productivity and insight through the implementation of web applications.",
    "crumbs": [
      "About the course"
    ]
  },
  {
    "objectID": "README.html#prerequisites",
    "href": "README.html#prerequisites",
    "title": "Introduction to R Shiny",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nA basic proficiency in R is required.\nSome knowledge of dplyr and ggplot2 would be beneficial as we’ll use them to build our applications.\nFamiliarity with the RStudio IDE (Integrated Development Environment) is preferable.\nNo knowledge of HTML, CSS, or JavaScript is required.",
    "crumbs": [
      "About the course"
    ]
  },
  {
    "objectID": "README.html#tools",
    "href": "README.html#tools",
    "title": "Introduction to R Shiny",
    "section": "Tools",
    "text": "Tools\nThe following tools need to be installed beforehand:\n\nR: Available at R download. It’s ok if you don’t have the latest version.\nRStudio: Download RStudio\nShiny: Install the latest stable release via install.packages(\"shiny\")\nTidyverse: Install via install.packages(\"tidyverse\")\nAdditional R packages from CRAN: Install via install.packages(c(\"rsconnect\", \"bslib\", \"palmerpenguins\", \"DT\", \"bsicons\", \"RColorBrewer\", \"plotly\", \"thematic\", \"showtext\", \"terra\", \"sf\", \"leaflet\", \"viridis\", \"shinyWidgets\", \"rnaturalearth\", \"mapview\", \"webshot2\", \"pagedown\", \"curl\", \"remotes\"))\nAdditional R package from GitHub: Install via remotes::install_github(\"r-spatial/leafem\")\nAdditional R package from R-Universe: Install via install.packages(\"rnaturalearthhires\", repos = \"https://ropensci.r-universe.dev\", type = \"source\")\nA modern web browser (preferably Google Chrome).",
    "crumbs": [
      "About the course"
    ]
  },
  {
    "objectID": "README.html#learning-outcomes",
    "href": "README.html#learning-outcomes",
    "title": "Introduction to R Shiny",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nAfter completing the workshop, you’ll be able to:\n\nUnderstand the structure of a Shiny application.\nRead and understand the code used to create a Shiny app.\nGain a solid knowledge of Shiny reactivity concepts.\nCreate a Shiny app and deploy it to shinyapps.io.",
    "crumbs": [
      "About the course"
    ]
  },
  {
    "objectID": "README.html#program",
    "href": "README.html#program",
    "title": "Introduction to R Shiny",
    "section": "Program",
    "text": "Program\n\nDay 1 (2-8 pm Berlin time)\n\nStructure of a Shiny application\nUsing HTML with {htmltools}\nReactivity – Basics\nShiny Input widgets\nShiny Outputs\nShiny app layout\n\n\n\nDay 2 (2-8 pm Berlin time)\n\nShiny apps theming and customization\nBasics of interactive mapping with {leaflet}\nExample: Creation of interactive spatial dashboard\nDeploying a Shiny app to shinyapps.io",
    "crumbs": [
      "About the course"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to R Shiny",
    "section": "",
    "text": "Welcome!\nThis is the website for the course “Introduction to R Shiny” by Physalia Courses.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "materials.html",
    "href": "materials.html",
    "title": "Materials",
    "section": "",
    "text": "Tidyverse",
    "crumbs": [
      "Materials"
    ]
  },
  {
    "objectID": "materials.html#tidyverse",
    "href": "materials.html#tidyverse",
    "title": "Materials",
    "section": "",
    "text": "Book R for Data Science, by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund.",
    "crumbs": [
      "Materials"
    ]
  },
  {
    "objectID": "materials.html#shiny",
    "href": "materials.html#shiny",
    "title": "Materials",
    "section": "Shiny",
    "text": "Shiny\n\nTutorial Shiny for R, by Posit.\nBook Mastering Shiny, by Hadley Wickham.\nBook Engineering Production-Grade Shiny Apps, by Colin Fay, Sébastien Rochette, Vincent Guyader and Cervan Girard.\nGallery Shiny components (inputs, outputs, messages), by Posit.\nGallery Nicer-looking Shiny widgets, by Victor Perrier, Fanny Meyer, and David Granjon.\nAI Assistant Shiny AI assistant, by Posit.\nUI editor Shiny UI editing tool, by Posit.",
    "crumbs": [
      "Materials"
    ]
  },
  {
    "objectID": "materials.html#building-modern-dashboards",
    "href": "materials.html#building-modern-dashboards",
    "title": "Materials",
    "section": "Building modern dashboards",
    "text": "Building modern dashboards\n\nQuarto dashboards with Shiny\nQuarto dashboards without Shiny\nStructuring dashboards with {bslib}\nTheming Shiny apps and dashboards with {bslib}\nAuto theming of plots with {thematic}",
    "crumbs": [
      "Materials"
    ]
  },
  {
    "objectID": "materials.html#interactive-mapping",
    "href": "materials.html#interactive-mapping",
    "title": "Materials",
    "section": "Interactive mapping",
    "text": "Interactive mapping\n\nCreating interactive maps with {leaflet}\nUsing Leaflet with Shiny\nExtensions for Leaflet with {leafem}\nQuick and convenient interactive maps with {mapview}",
    "crumbs": [
      "Materials"
    ]
  },
  {
    "objectID": "01-01-introduction.html",
    "href": "01-01-introduction.html",
    "title": "1  Introduction to Shiny",
    "section": "",
    "text": "Exercise 1\nUsing the {bslib} Shiny app skeleton:",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Shiny</span>"
    ]
  },
  {
    "objectID": "01-01-introduction.html#exercise-1",
    "href": "01-01-introduction.html#exercise-1",
    "title": "1  Introduction to Shiny",
    "section": "",
    "text": "Code for Exercise 1\n\n\n\n\n\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define user interface (UI)\nui &lt;- page_sidebar(\n  title = \"My app\",\n  sidebar = sidebar(\n    title = \"Inputs\"\n  ),\n  \"Main content area for outputs\"\n)\n\n# Define server\nserver &lt;- function(input, output, session) {\n  \n  # Add code here for doing computations and producing output\n}\n\n\n# Run app\nshinyApp(ui, server)\n\n\n\n\n\n\nChange title to “Skeleton Shiny app”\nAdd a brief sentence to place under the sidebar title\nChange the text shown for the main panel\n\n\n\n\n\n\n\nSolution for Exercise 1\n\n\n\n\n\n\nlibrary(shiny)\nlibrary(bslib)\n\n# Define user interface (UI)\nui &lt;- page_sidebar(\n  title = \"Skeleton Shiny app\",\n  sidebar = sidebar(\n    title = \"Inputs\",\n    \"Additional info providing context to the widgets and/or app use.\"\n  ),\n  \"Main content area for outputs, which can include plots, images, tables, and text!\"\n)\n\n# Define server\nserver &lt;- function(input, output, session) {\n  \n  # Add code here for doing computations and producing output\n}\n\n\n# Run app\nshinyApp(ui, server)",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Shiny</span>"
    ]
  },
  {
    "objectID": "01-01-introduction.html#exercise-2",
    "href": "01-01-introduction.html#exercise-2",
    "title": "1  Introduction to Shiny",
    "section": "Exercise 2",
    "text": "Exercise 2\n\n\n\n\n\n\nCode for Exercise 2\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(bslib)\n\n\n# Define UI\nui &lt;- page_sidebar(\n  title = \"Penguins dashboard\",\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = \"Histogram controls\",\n    \n    #create dropdown selection for numeric columns\n    varSelectInput(\n      inputId = _____,\n      label = \"Select variable\",\n      data = dplyr::select_if(penguins, is.numeric)\n    ),\n    \n    #create slider input for histogram\n    sliderInput(\"bins\", \"Number of bins\", min = 3, max = 100, value = 30, step = 1)\n  ),  #close sidebar\n  \n  # Main panel content\n  plotOutput(\"figure\")\n  \n)  #close page_sidebar\n\n\n\n# Define server\nserver &lt;- function(input, output, session) {\n  \n  # Create histogram based on selection from inputs\n  output$_____ &lt;- renderPlot({\n    ggplot(penguins) +\n      geom_histogram(aes(!!input$variable), color = \"black\", fill = \"cadetblue\",\n                     bins = input$bins) +\n      theme_bw(base_size = 20)\n  })\n  \n}\n\n\n# Run app\nshinyApp(ui, server)\n\n\n\n\nUsing the included code:\n\nFill in the blank for the missing inputId\nFill in the blank for the missing output object\nChange the slider values to have a minimum of 2, maximum of 10, and a default starting value of 5\n\n\n\n\n\n\n\nSolution for Exercise 2\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(bslib)\n\n\n# Define UI\nui &lt;- page_sidebar(\n  title = \"Penguins dashboard\",\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = \"Histogram controls\",\n    \n    #create dropdown selection for numeric columns\n    varSelectInput(\n      inputId = \"variable\",\n      label = \"Select variable\",\n      data = dplyr::select_if(penguins, is.numeric)\n    ),\n    \n    #create slider input for histogram\n    sliderInput(\"bins\", \"Number of bins\", min = 2, max = 10, value = 5, step = 1)\n  ),  #close sidebar\n  \n  # Main panel content\n  plotOutput(\"figure\")\n  \n)  #close page_sidebar\n\n\n\n# Define server\nserver &lt;- function(input, output, session) {\n  \n  # Create histogram based on selection from inputs\n  output$figure &lt;- renderPlot({\n    ggplot(penguins) +\n      geom_histogram(aes(!!input$variable), color = \"black\", fill = \"cadetblue\",\n                     bins = input$bins) +\n      theme_bw(base_size = 20)\n  })\n  \n}\n\n\n# Run app\nshinyApp(ui, server)",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to Shiny</span>"
    ]
  },
  {
    "objectID": "01-02-html.html",
    "href": "01-02-html.html",
    "title": "2  Introduction to HTML and {htmltools}",
    "section": "",
    "text": "Exercise 1\nUsing the included code:",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to HTML and `{htmltools}`</span>"
    ]
  },
  {
    "objectID": "01-02-html.html#exercise-1",
    "href": "01-02-html.html#exercise-1",
    "title": "2  Introduction to HTML and {htmltools}",
    "section": "",
    "text": "Code for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(bslib)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_sidebar(\n  title = h1(\"Penguins dashboard\"),  #Use H1 header\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Histogram controls\"),  #make text bold\n    \n    #create dropdown selection for numeric columns\n    varSelectInput(\n      inputId = \"var\",\n      label = \"Select variable\",\n      data = dplyr::select_if(penguins, is.numeric)\n    ),\n    \n    radioButtons(inputId = \"spp\",\n                 label = em(\"Select a species\"),  #make text italic\n                 choices = unique(penguins$species)\n    ),\n    \n    #create slider input for histogram\n    sliderInput(\"bins\",\n                code(\"Number of bins\"),  #make text look like monospace code\n                min = 3,\n                max = 100,\n                value = 30,\n                step = 1),\n    \n    \n    hr(),  #add horizontal line\n    \n    # Brief description of dataset (as paragraph)\n    p(\"Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\"),\n    \n    p(\"The\", code(\"{palmerpenguins}\"), \"package contains two datasets. Both datasets contain data for 344 penguins. There are 3 different species of penguins in this dataset, collected from 3 islands in the Palmer Archipelago, Antarctica. More info can be found at this link:\"),\n    \n    # Link to {palmerpenguins} package website\n    a(\"{palmerpenguins}\", href = \"https://allisonhorst.github.io/palmerpenguins/\"),\n    \n    # Artwork from Allison Horst\n    tags$figure(\n      img(src = \"https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png\",\n          width = \"100%\"),\n      tags$figcaption(em(\"Artwork by @allison_horst\"))\n    )\n  ),\n  \n  # Main panel content\n  h3(\"Exploration of Palmer penguins data\"),\n  \n  plotOutput(\"hist\")\n  \n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create histogram based on selection from inputs\n  output$hist &lt;- renderPlot({\n    ggplot(penguins[penguins$species == input$spp,]) +\n      geom_histogram(aes(!!input$var), color = \"black\", fill = \"cadetblue\",\n                     bins = input$bins) +\n      theme_bw(base_size = 20)\n  })\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)\n\n\n\n\n\n\nChange format of text above histogram plot from an H3 header to bold text\nAdd hyperlink (https://allisonhorst.github.io/palmerpenguins/) to the word “Data” at the beginning of first sentence in sidebar\nRemove other text/hyperlink for “{palmerpenguins}” from bottom of sidebar\n\n\n\n\n\n\n\nSolution for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(bslib)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_sidebar(\n  title = h1(\"Penguins dashboard\"),  #Use H1 header\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Histogram controls\"),  #make text bold\n    \n    #create dropdown selection for numeric columns\n    varSelectInput(\n      inputId = \"var\",\n      label = \"Select variable\",\n      data = dplyr::select_if(penguins, is.numeric)\n    ),\n    \n    radioButtons(inputId = \"spp\",\n                 label = em(\"Select a species\"),  #make text italic\n                 choices = unique(penguins$species)\n    ),\n    \n    #create slider input for histogram\n    sliderInput(\"bins\",\n                code(\"Number of bins\"),  #make text look like monospace code\n                min = 3,\n                max = 100,\n                value = 30,\n                step = 1),\n    \n    \n    hr(),  #add horizontal line\n    \n    # Brief description of dataset (as paragraph)\n    p(a(\"Data\", href = \"https://allisonhorst.github.io/palmerpenguins/\"), \"were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\"),\n    \n    p(\"The\", code(\"{palmerpenguins}\"), \"package contains two datasets. Both datasets contain data for 344 penguins. There are 3 different species of penguins in this dataset, collected from 3 islands in the Palmer Archipelago, Antarctica. More info can be found at this link:\"),\n    \n    # Artwork from Allison Horst\n    tags$figure(\n      img(src = \"https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png\",\n          width = \"100%\"),\n      tags$figcaption(em(\"Artwork by @allison_horst\"))\n    )\n  ),\n  \n  # Main panel content\n  strong(\"Exploration of Palmer penguins data\"),\n  \n  plotOutput(\"hist\")\n  \n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create histogram based on selection from inputs\n  output$hist &lt;- renderPlot({\n    ggplot(penguins[penguins$species == input$spp,]) +\n      geom_histogram(aes(!!input$var), color = \"black\", fill = \"cadetblue\",\n                     bins = input$bins) +\n      theme_bw(base_size = 20)\n  })\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to HTML and `{htmltools}`</span>"
    ]
  },
  {
    "objectID": "01-03-reactivity.html",
    "href": "01-03-reactivity.html",
    "title": "3  Introduction to Reactivity",
    "section": "",
    "text": "Exercise 1\nUsing the included code:",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Reactivity</span>"
    ]
  },
  {
    "objectID": "01-03-reactivity.html#exercise-1",
    "href": "01-03-reactivity.html#exercise-1",
    "title": "3  Introduction to Reactivity",
    "section": "",
    "text": "Code for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(bslib)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_sidebar(\n  title = h1(\"Penguins dashboard\"),\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Histogram controls\"),\n    \n    #create dropdown selection for numeric columns\n    varSelectInput(\n      inputId = \"var\",\n      label = \"Select variable\",\n      data = dplyr::select_if(penguins, is.numeric)\n    ),\n    \n    radioButtons(inputId = \"spp\",\n                 label = \"Select a species\",\n                 choices = unique(penguins$species)\n    ),\n    \n    #create slider input for histogram\n    sliderInput(\"bins\",\n                \"Number of bins\",\n                min = 3,\n                max = 100,\n                value = 30,\n                step = 1),\n    \n    \n    hr(),  #add horizontal line\n    \n    # Artwork from Allison Horst\n    tags$figure(\n      img(src = \"https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png\",\n          width = \"100%\"),\n      tags$figcaption(em(\"Artwork by @allison_horst\"))\n    )\n  ),\n  \n  # Main panel content\n  h3(\"Exploration of Palmer penguins data\"),\n  \n  plotOutput(\"hist\")\n  \n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create histogram based on selection from inputs\n  output$hist &lt;- renderPlot({\n    ggplot(penguins[penguins$species == input$spp,]) +\n      geom_histogram(aes(!!input$var), color = \"black\", fill = \"cadetblue\",\n                     bins = input$bins) +\n      theme_bw(base_size = 20)\n  })\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)\n\n\n\n\n\n\nFilter penguins dataset via a reactive object instead of current approach on first line of ggplot code\n\n\n\n\n\n\n\nSolution for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(bslib)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_sidebar(\n  title = h1(\"Penguins dashboard\"),\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Histogram controls\"),\n    \n    #create dropdown selection for numeric columns\n    varSelectInput(\n      inputId = \"var\",\n      label = \"Select variable\",\n      data = dplyr::select_if(penguins, is.numeric)\n    ),\n    \n    radioButtons(inputId = \"spp\",\n                 label = \"Select a species\",\n                 choices = unique(penguins$species)\n    ),\n    \n    #create slider input for histogram\n    sliderInput(\"bins\",\n                \"Number of bins\",\n                min = 3,\n                max = 100,\n                value = 30,\n                step = 1),\n    \n    \n    hr(),  #add horizontal line\n    \n    # Artwork from Allison Horst\n    tags$figure(\n      img(src = \"https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png\",\n          width = \"100%\"),\n      tags$figcaption(em(\"Artwork by @allison_horst\"))\n    )\n  ),\n  \n  # Main panel content\n  h3(\"Exploration of Palmer penguins data\"),\n  \n  plotOutput(\"hist\")\n  \n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create reactive object\n  penguins_filt &lt;- reactive({\n    penguins |&gt; \n      filter(species == input$spp)\n  })\n  \n  # Create histogram based on selection from inputs\n  output$hist &lt;- renderPlot({\n    ggplot(penguins_filt()) +\n      geom_histogram(aes(!!input$var), color = \"black\", fill = \"cadetblue\",\n                     bins = input$bins) +\n      theme_bw(base_size = 20)\n  })\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Reactivity</span>"
    ]
  },
  {
    "objectID": "01-03-reactivity.html#exercise-2",
    "href": "01-03-reactivity.html#exercise-2",
    "title": "3  Introduction to Reactivity",
    "section": "Exercise 2",
    "text": "Exercise 2\n\n\n\n\n\n\nCode for Exercise 2\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(bslib)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_sidebar(\n  title = h1(\"Penguins dashboard\"),\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Histogram controls\"),\n    \n    #create dropdown selection for numeric columns\n    varSelectInput(\n      inputId = \"var\",\n      label = \"Select variable\",\n      data = dplyr::select_if(penguins, is.numeric)\n    ),\n    \n    radioButtons(inputId = \"spp\",\n                 label = \"Select a species\",\n                 choices = unique(penguins$species)\n    ),\n    \n    #create slider input for histogram\n    sliderInput(\"bins\",\n                \"Number of bins\",\n                min = 3,\n                max = 100,\n                value = 30,\n                step = 1),\n    \n    \n    hr(),  #add horizontal line\n    \n    # Artwork from Allison Horst\n    tags$figure(\n      img(src = \"https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png\",\n          width = \"100%\"),\n      tags$figcaption(em(\"Artwork by @allison_horst\"))\n    )\n  ),\n  \n  # Main panel content\n  h3(\"Exploration of Palmer penguins data\"),\n  \n  plotOutput(\"hist\")\n  \n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create histogram based on selection from inputs\n  output$hist &lt;- renderPlot({\n    ggplot(penguins[penguins$species == input$spp,]) +\n      geom_histogram(aes(!!input$var), fill = \"cadetblue\", bins = input$bins) +\n      theme_bw(base_size = 20)\n  })\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)\n\n\n\n\nUsing the included code:\n\nCreate reactive value for the binwidth used in histogram (by species and variable)\nAdd binwidth to title of figure\n\n\n\n\n\n\n\nSolution for Exercise 2\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(bslib)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_sidebar(\n  title = h1(\"Penguins dashboard\"),\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Histogram controls\"),\n    \n    #create dropdown selection for numeric columns\n    varSelectInput(\n      inputId = \"var\",\n      label = \"Select variable\",\n      data = dplyr::select_if(penguins, is.numeric)\n    ),\n    \n    radioButtons(inputId = \"spp\",\n                 label = \"Select a species\",\n                 choices = unique(penguins$species)\n    ),\n    \n    #create slider input for histogram\n    sliderInput(\"bins\",\n                \"Number of bins\",\n                min = 3,\n                max = 100,\n                value = 30,\n                step = 1),\n    \n    \n    hr(),  #add horizontal line\n    \n    # Artwork from Allison Horst\n    tags$figure(\n      img(src = \"https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png\",\n          width = \"100%\"),\n      tags$figcaption(em(\"Artwork by @allison_horst\"))\n    )\n  ),\n  \n  # Main panel content\n  h3(\"Exploration of Palmer penguins data\"),\n  \n  plotOutput(\"hist\")\n  \n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create reactive value for sample size of dataset\n  r &lt;- reactiveValues(binwidth = 0)\n  \n  # Update reactiveValue for sample size based on penguins_filt\n  observe({\n    req(input$bins)  #ensure/require that reactive object is available before proceeding\n    \n    # Define min and max values for selected variable by species\n    min_var &lt;- min(penguins[penguins$species == input$spp, input$var], na.rm = TRUE)\n    max_var &lt;- max(penguins[penguins$species == input$spp, input$var], na.rm = TRUE)\n    r$binwidth &lt;- round((max_var - min_var) / input$bins, 3)  #update reactive value\n  })\n  \n  # Create histogram based on selection from inputs\n  output$hist &lt;- renderPlot({\n    ggplot(penguins[penguins$species == input$spp,]) +\n      geom_histogram(aes(!!input$var), fill = \"cadetblue\", bins = input$bins) +\n      labs(title = paste(\"Histogram binwidth is\", r$binwidth)) +  #reactive value used in title\n      theme_bw(base_size = 20)\n  })\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Introduction to Reactivity</span>"
    ]
  },
  {
    "objectID": "01-04-inputs.html",
    "href": "01-04-inputs.html",
    "title": "4  Input Widgets",
    "section": "",
    "text": "Exercise 1\nUsing the included code:",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Input Widgets</span>"
    ]
  },
  {
    "objectID": "01-04-inputs.html#exercise-1",
    "href": "01-04-inputs.html#exercise-1",
    "title": "4  Input Widgets",
    "section": "",
    "text": "Code for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(bslib)\nlibrary(DT)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_sidebar(\n  title = h1(\"Penguins dashboard\"),\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Histogram controls\"),\n    \n    # Filter by species\n    selectizeInput(inputId = \"spp\",\n                   label = \"Select a species\",\n                   choices = unique(penguins$species),\n                   selected = \"Adelie\",\n                   multiple = TRUE\n    ),\n    \n    \n    #create dropdown selection for var on x-axis\n    varSelectInput(\n      inputId = \"var_x\",\n      label = \"Select x-axis\",\n      data = penguins,\n      selected = \"bill_length_mm\"\n    ),\n    \n    #create dropdown selection for var on y-axis\n    varSelectInput(\n      inputId = \"var_y\",\n      label = \"Select y-axis\",\n      data = penguins,\n      selected = \"body_mass_g\"\n    ),\n    \n    # Add button to download figure\n    downloadButton(outputId = \"save_fig\",\n                   label = \"Download figure\"),\n    \n    # Add download link for full dataset\n    downloadLink(outputId = \"save_data\",\n                 label = \"Download brushed penguins dataset\")\n    \n  ),\n  \n  # Main panel content\n  h3(\"Exploration of Palmer penguins data\"),\n  \n  plotOutput(\"biplot\", brush = \"plot_brush\"),\n  dataTableOutput(\"tbl\")\n  \n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create reactive object for filtered penguins data\n  penguins_filt &lt;- reactive({\n    penguins |&gt; \n      filter(species %in% input$spp)\n  })\n  \n  \n  ### Output in app ###\n  \n  # Create reactive object for ggplot fig\n  fig &lt;- reactive({\n    ggplot(penguins_filt()) +\n      geom_point(aes(!!input$var_x, !!input$var_y, color = species), size = 2, alpha = 0.75) +\n      scale_color_brewer(palette = \"Set1\") +\n      theme_bw(base_size = 20)\n  })\n  \n  # Create biplot based on selected variables\n  output$biplot &lt;- renderPlot({\n    fig()\n  })\n  \n  # Create table from brushed points on plot\n  output$tbl &lt;- renderDataTable(\n    brushedPoints(penguins_filt(), input$plot_brush),\n    options = list(pageLength = 5)\n  )\n  \n  \n  ### Output to download ###\n  \n  # Code to export figure upon clicking download button\n  output$save_fig &lt;- downloadHandler(\n    filename = \"example_fig.png\",\n    content = function(file) {\n      ggsave(file, plot = fig(), device = \"png\", width = 6, height = 4, units = \"in\")\n    }\n  )\n  \n  # Code to export data upon clicking download link\n  output$save_data &lt;- downloadHandler(\n    filename = \"penguins_brushed.csv\",\n    content = function(file) {\n      readr::write_csv(brushedPoints(penguins_filt(), input$plot_brush),\n                       file)\n    }\n  )\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)\n\n\n\n\n\n\nChange the input widget for species from a dropdown menu to checkbox group\nAdd a radio button widget that also filters the penguins dataset by year (in addition to species)\n\n\n\n\n\n\n\nSolution for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(bslib)\nlibrary(DT)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_sidebar(\n  title = h1(\"Penguins dashboard\"),\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Histogram controls\"),\n    \n    # Filter by species\n    checkboxGroupInput(\n      inputId = \"spp\",\n      label = \"Select a species\",\n      choices = unique(penguins$species),\n      selected = \"Adelie\"\n    ),\n    \n    # Filter by year\n    radioButtons(\n      inputId = \"year\",\n      label = \"Select a year\",\n      choices = unique(penguins$year),\n      selected = 2009\n    ),\n    \n    \n    #create dropdown selection for var on x-axis\n    varSelectInput(\n      inputId = \"var_x\",\n      label = \"Select x-axis\",\n      data = penguins,\n      selected = \"bill_length_mm\"\n    ),\n    \n    #create dropdown selection for var on y-axis\n    varSelectInput(\n      inputId = \"var_y\",\n      label = \"Select y-axis\",\n      data = penguins,\n      selected = \"body_mass_g\"\n    ),\n    \n    # Add button to download figure\n    downloadButton(outputId = \"save_fig\",\n                   label = \"Download figure\"),\n    \n    # Add download link for full dataset\n    downloadLink(outputId = \"save_data\",\n                 label = \"Download brushed penguins dataset\")\n    \n  ),\n  \n  # Main panel content\n  h3(\"Exploration of Palmer penguins data\"),\n  \n  plotOutput(\"biplot\", brush = \"plot_brush\"),\n  dataTableOutput(\"tbl\")\n  \n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create reactive object for filtered penguins data\n  penguins_filt &lt;- reactive({\n    penguins |&gt; \n      filter(species %in% input$spp,\n             year == input$year)\n  })\n  \n  \n  ### Output in app ###\n  \n  # Create reactive object for ggplot fig\n  fig &lt;- reactive({\n    ggplot(penguins_filt()) +\n      geom_point(aes(!!input$var_x, !!input$var_y, color = species), size = 2, alpha = 0.75) +\n      scale_color_brewer(palette = \"Set1\") +\n      theme_bw(base_size = 20)\n  })\n  \n  # Create biplot based on selected variables\n  output$biplot &lt;- renderPlot({\n    fig()\n  })\n  \n  # Create table from brushed points on plot\n  output$tbl &lt;- renderDataTable(\n    brushedPoints(penguins_filt(), input$plot_brush),\n    options = list(pageLength = 5)\n  )\n  \n  \n  ### Output to download ###\n  \n  # Code to export figure upon clicking download button\n  output$save_fig &lt;- downloadHandler(\n    filename = \"example_fig.png\",\n    content = function(file) {\n      ggsave(file, plot = fig(), device = \"png\", width = 6, height = 4, units = \"in\")\n    }\n  )\n  \n  # Code to export data upon clicking download link\n  output$save_data &lt;- downloadHandler(\n    filename = \"penguins_brushed.csv\",\n    content = function(file) {\n      readr::write_csv(brushedPoints(penguins_filt(), input$plot_brush),\n                       file)\n    }\n  )\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Input Widgets</span>"
    ]
  },
  {
    "objectID": "01-05-outputs.html",
    "href": "01-05-outputs.html",
    "title": "5  Outputs",
    "section": "",
    "text": "Exercise 1\nUsing the included code:\np(\"Data are available by CC-0 license in accordance with the Palmer Station LTER Data Policy and the LTER Data Access Policy for Type I data.\"),  p(\"Anyone interested in publishing the data should contact Dr. Kristen Gorman about analysis and working together on any final products. From Gorman et al. (2014): Individuals interested in using these data are expected to follow the US LTER Network’s Data Access Policy, Requirements and Use Agreement:\", a(href=\"https://lternet.edu/data-access-policy/\", \"https://lternet.edu/data-access-policy/\"), \".\")",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Outputs</span>"
    ]
  },
  {
    "objectID": "01-05-outputs.html#exercise-1",
    "href": "01-05-outputs.html#exercise-1",
    "title": "5  Outputs",
    "section": "",
    "text": "Code for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(bslib)\nlibrary(bsicons)\nlibrary(RColorBrewer)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_sidebar(\n  title = h1(\"Penguins dashboard\"),\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Plot controls\"),\n    \n    # Controls for both plots\n    selectizeInput(inputId = \"spp\",\n                   label = \"Select a species\",\n                   choices = unique(penguins$species),\n                   selected = \"Adelie\",\n                   multiple = TRUE\n    ),\n    \n    popover(\n      bsicons::bs_icon(\"gear\", title = \"Color Palette\"),\n      title = \"Set color palette\",\n      selectInput(\"pal\",\n                  \"RColorBrewer\",\n                  selected = \"Set1\",\n                  choices = RColorBrewer::brewer.pal.info |&gt; \n                    filter(category == 'qual') |&gt; \n                    rownames(),\n                  multiple = FALSE)\n    ),\n    \n    \n    #create dropdown selection for var on x-axis\n    varSelectInput(\n      inputId = \"var_x\",\n      label = \"Select x-axis\",\n      data = penguins,\n      selected = \"bill_length_mm\"\n    ),\n    \n    #create dropdown selection for var on y-axis\n    varSelectInput(\n      inputId = \"var_y\",\n      label = \"Select y-axis\",\n      data = penguins,\n      selected = \"body_mass_g\"\n    ),\n    \n    \n    # Add reactive text that summarizes 'species' selection\n    htmlOutput(\"txt\")\n    \n  ),\n  \n  # Main panel content\n  layout_columns(\n    value_box(title = \"Total sample size\",\n              value = nrow(penguins),\n              showcase = icon('kiwi-bird'),\n              theme = \"bg-gradient-indigo-purple\"),\n    \n    value_box(title = \"Islands sampled\",\n              value = n_distinct(penguins$island),\n              showcase = bsicons::bs_icon('geo-alt-fill'),\n              theme = \"bg-gradient-orange-green\"),\n    \n    value_box(title = \"Latest sampling year\",\n              value = max(penguins$year),\n              showcase = icon('calendar'),\n              theme = \"bg-gradient-yellow-red\")\n  ),\n  \n  \n  h3(\"Exploration of Palmer penguins data\"),\n  \n  plotOutput(\"biplot\")\n  \n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  ### Modal dialog ###\n  \n  # Generate modal dialog text and set options\n  dialog_text &lt;- modalDialog( \n    title = strong(\"Disclaimer\"), \n    easy_close = TRUE, \n    p(\"Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\"),\n    \n    p(\"The\", code(\"{palmerpenguins}\"), \"package contains two datasets. Both datasets contain data for 344 penguins. There are 3 different species of penguins in this dataset, collected from 3 islands in the Palmer Archipelago, Antarctica. More info can be found at this link:\"),\n    \n    # Link to {palmerpenguins} package website\n    a(\"{palmerpenguins}\", href = \"https://allisonhorst.github.io/palmerpenguins/\")\n  )\n  \n  \n  # Set modal dialog box to appear when app is initialized\n  observe({ \n    showModal(dialog_text) \n  })\n  \n  \n  \n  \n  \n  # Create reactive object for filtered penguins data\n  penguins_filt &lt;- reactive({\n    penguins |&gt; \n      filter(species %in% input$spp)\n  })\n  \n  \n  ### Notification based on species filtering ###\n  observe({\n    req(penguins_filt())\n\n    showNotification(\n      HTML(paste(\"The species input has changed.\", br(), \"This message will disappear after 5 seconds.\")),\n      type = \"message\",\n      duration = 5  #lasts 5 seconds\n    )\n  })\n  \n  \n  \n  \n  \n  ### Output in app ###\n  \n  # Generate text for sidebar based on penguins_filt\n  output$txt &lt;- renderText({\n    paste(strong(n_distinct(penguins_filt()$species)),  #bold reactive component\n          \"species were selected, which includes\",\n          strong(paste(unique(penguins_filt()$species), collapse = \", \"))  #bold reactive component\n    )\n  })\n  \n  # Create biplot based on selected variables\n  output$biplot &lt;- renderPlot({\n    ggplot(penguins_filt()) +\n      geom_point(aes(!!input$var_x, !!input$var_y, color = species), size = 2, alpha = 0.75) +\n      scale_color_brewer(palette = input$pal) +\n      theme_bw(base_size = 20)\n  })\n  \n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)\n\n\n\n\n\n\nChange the modal dialog text to be the following disclaimer in italics:\n\n\n\nChange notification to specify the current variable plotted on the x-axis and change type to “warning” from “message”, where the variable name is in bold\n\n\n\n\n\n\n\nSolution for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(bslib)\nlibrary(bsicons)\nlibrary(RColorBrewer)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_sidebar(\n  title = h1(\"Penguins dashboard\"),\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Plot controls\"),\n    \n    # Controls for both plots\n    selectizeInput(inputId = \"spp\",\n                   label = \"Select a species\",\n                   choices = unique(penguins$species),\n                   selected = \"Adelie\",\n                   multiple = TRUE\n    ),\n    \n    popover(\n      bsicons::bs_icon(\"gear\", title = \"Color Palette\"),\n      title = \"Set color palette\",\n      selectInput(\"pal\",\n                  \"RColorBrewer\",\n                  selected = \"Set1\",\n                  choices = RColorBrewer::brewer.pal.info |&gt; \n                    filter(category == 'qual') |&gt; \n                    rownames(),\n                  multiple = FALSE)\n    ),\n    \n    \n    #create dropdown selection for var on x-axis\n    varSelectInput(\n      inputId = \"var_x\",\n      label = \"Select x-axis\",\n      data = penguins,\n      selected = \"bill_length_mm\"\n    ),\n    \n    #create dropdown selection for var on y-axis\n    varSelectInput(\n      inputId = \"var_y\",\n      label = \"Select y-axis\",\n      data = penguins,\n      selected = \"body_mass_g\"\n    ),\n    \n    # Add reactive text that summarizes 'species' selection\n    htmlOutput(\"txt\")\n    \n  ),\n  \n  # Main panel content\n  layout_columns(\n    value_box(title = \"Total sample size\",\n              value = nrow(penguins),\n              showcase = icon('kiwi-bird'),\n              theme = \"bg-gradient-indigo-purple\"),\n    \n    value_box(title = \"Islands sampled\",\n              value = n_distinct(penguins$island),\n              showcase = bsicons::bs_icon('geo-alt-fill'),\n              theme = \"bg-gradient-orange-green\"),\n    \n    value_box(title = \"Latest sampling year\",\n              value = max(penguins$year),\n              showcase = icon('calendar'),\n              theme = \"bg-gradient-yellow-red\")\n  ),\n  \n  \n  h3(\"Exploration of Palmer penguins data\"),\n  \n  plotOutput(\"biplot\")\n  \n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  ### Modal dialog ###\n  \n  # Generate modal dialog text and set options\n  dialog_text &lt;- modalDialog( \n    title = strong(\"Disclaimer\"), \n    easy_close = TRUE, \n    em(\n      p(\"Data are available by CC-0 license in accordance with the Palmer Station LTER Data Policy and the LTER Data Access Policy for Type I data.\"),\n    \n    p(\"Anyone interested in publishing the data should contact Dr. Kristen Gorman about analysis and working together on any final products. From Gorman et al. (2014): Individuals interested in using these data are expected to follow the US LTER Network’s Data Access Policy, Requirements and Use Agreement:\", a(href=\"https://lternet.edu/data-access-policy/\", \"https://lternet.edu/data-access-policy/\"), \".\")\n    )\n  )\n  \n  \n  # Set modal dialog box to appear when app is initialized\n  observe({ \n    showModal(dialog_text) \n  })\n  \n  \n  \n  \n  \n  # Create reactive object for filtered penguins data\n  penguins_filt &lt;- reactive({\n    penguins |&gt; \n      filter(species %in% input$spp)\n  })\n  \n  \n  ### Notification based on species filtering ###\n  observe({\n    req(penguins_filt())\n\n    showNotification(\n      HTML(paste(\"The X-axis has changed to\", strong(input$var_x))),\n      type = \"warning\",\n      duration = 5  #lasts 5 seconds\n    )\n  })\n  \n  \n  \n  \n  \n  ### Output in app ###\n  \n  # Generate text for sidebar based on penguins_filt\n  output$txt &lt;- renderText({\n    paste(strong(n_distinct(penguins_filt()$species)),  #bold reactive component\n          \"species were selected, which includes\",\n          strong(paste(unique(penguins_filt()$species), collapse = \", \"))  #bold reactive component\n    )\n  })\n  \n  # Create biplot based on selected variables\n  output$biplot &lt;- renderPlot({\n    ggplot(penguins_filt()) +\n      geom_point(aes(!!input$var_x, !!input$var_y, color = species), size = 2, alpha = 0.75) +\n      scale_color_brewer(palette = input$pal) +\n      theme_bw(base_size = 20)\n  })\n  \n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Outputs</span>"
    ]
  },
  {
    "objectID": "01-06-layout.html",
    "href": "01-06-layout.html",
    "title": "6  Shiny app layouts",
    "section": "",
    "text": "Exercise 1\nUsing the included code:",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Shiny app layouts</span>"
    ]
  },
  {
    "objectID": "01-06-layout.html#exercise-1",
    "href": "01-06-layout.html#exercise-1",
    "title": "6  Shiny app layouts",
    "section": "",
    "text": "Code for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(bslib)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_sidebar(\n  title = h1(\"Penguins dashboard\"),\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Plot controls\"),\n    \n    #create dropdown selection for var on x-axis\n    varSelectInput(\n      inputId = \"var_x\",\n      label = \"Select x-axis\",\n      data = penguins,\n      selected = \"bill_length_mm\"\n    ),\n    \n    #create dropdown selection for var on y-axis\n    varSelectInput(\n      inputId = \"var_y\",\n      label = \"Select y-axis\",\n      data = penguins,\n      selected = \"body_mass_g\"\n    ),\n    \n    # Add image w/ hyperlink\n    a(href = \"https://pallter.marine.rutgers.edu\",  #add hyperlink\n      img(src = \"Palmer_LTER_logo.png\",  #add image from local directory (in www/ folder)\n          width = \"80%\",\n          style = \"display: block; margin-left: auto; margin-right: auto;\")  #to align image to center\n    )\n    \n  ),\n  \n  ### Main panel content ###\n  \n  navset_tab(\n    # Page for Adelie\n    nav_panel(title = \"Adelie\",\n              h3(\"Exploration of Adelie data\"),\n              plotOutput(\"adelie_plot\")\n    ),\n    # Page for Chinstrap\n    nav_panel(title = \"Chinstrap\",\n              h3(\"Exploration of Chinstrap data\"),\n              plotOutput(\"chinstrap_plot\")\n    ),\n    # Page for Gentoo\n    nav_panel(title = \"Gentoo\",\n              h3(\"Exploration of Gentoo data\"),\n              plotOutput(\"gentoo_plot\")\n    ),\n    nav_spacer(),  #shift tabs to be right-aligned\n    nav_menu(\n      title = \"Links\",\n      nav_item(a(shiny::icon('kiwi-bird'), \"palmerpenguins\", href = \"https://allisonhorst.github.io/palmerpenguins/\")),\n      nav_item(a(shiny::icon(\"globe\"), \"Palmer LTER\", href = \"https://pallter.marine.rutgers.edu\"))\n    )\n  )\n  \n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create biplots based on selected variables\n  output$adelie_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Adelie',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"cadetblue\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n  output$chinstrap_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Chinstrap',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"goldenrod\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n  output$gentoo_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Gentoo',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"firebrick\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)\n\n\n\n\n\n\nChange the layout to a navbar page\nReverse the order of the species listed in the navbar\n\n\n\n\n\n\n\nSolution for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(bslib)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_navbar(\n  title = h1(\"Penguins dashboard\"),\n  \n  # Define sidebar inputs\n  sidebar = sidebar(\n    title = strong(\"Plot controls\"),\n    \n    #create dropdown selection for var on x-axis\n    varSelectInput(\n      inputId = \"var_x\",\n      label = \"Select x-axis\",\n      data = penguins,\n      selected = \"bill_length_mm\"\n    ),\n    \n    #create dropdown selection for var on y-axis\n    varSelectInput(\n      inputId = \"var_y\",\n      label = \"Select y-axis\",\n      data = penguins,\n      selected = \"body_mass_g\"\n    ),\n    \n    # Add image w/ hyperlink\n    a(href = \"https://pallter.marine.rutgers.edu\",  #add hyperlink\n      img(src = \"Palmer_LTER_logo.png\",  #add image from local directory (in www/ folder)\n          width = \"80%\",\n          style = \"display: block; margin-left: auto; margin-right: auto;\")  #to align image to center\n    )\n    \n  ),\n  \n  ### Main panel content ###\n  \n  # Page for Gentoo\n  nav_panel(title = \"Gentoo\",\n            h3(\"Exploration of Gentoo data\"),\n            plotOutput(\"gentoo_plot\")\n  ),\n  # Page for Chinstrap\n  nav_panel(title = \"Chinstrap\",\n            h3(\"Exploration of Chinstrap data\"),\n            plotOutput(\"chinstrap_plot\")\n  ),\n  # Page for Adelie\n  nav_panel(title = \"Adelie\",\n            h3(\"Exploration of Adelie data\"),\n            plotOutput(\"adelie_plot\")\n  ),\n    nav_spacer(),  #shift tabs to be right-aligned\n    nav_menu(\n      title = \"Links\",\n      nav_item(a(shiny::icon('kiwi-bird'), \"palmerpenguins\", href = \"https://allisonhorst.github.io/palmerpenguins/\")),\n      nav_item(a(shiny::icon(\"globe\"), \"Palmer LTER\", href = \"https://pallter.marine.rutgers.edu\"))\n    )\n  )\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create biplots based on selected variables\n  output$adelie_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Adelie',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"cadetblue\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n  output$chinstrap_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Chinstrap',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"goldenrod\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n  output$gentoo_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Gentoo',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"firebrick\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Shiny app layouts</span>"
    ]
  },
  {
    "objectID": "01-06-layout.html#exercise-2",
    "href": "01-06-layout.html#exercise-2",
    "title": "6  Shiny app layouts",
    "section": "Exercise 2",
    "text": "Exercise 2\n\n\n\n\n\n\nCode for Exercise 2\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(shiny)\nlibrary(bslib)\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_fillable(\n  h1(\"Penguins dashboard\"),\n  \n  ### Input widgets ###\n  \n  #create dropdown selection for var on x-axis\n  layout_columns(\n    varSelectInput(\n      inputId = \"var_x\",\n      label = \"Select x-axis\",\n      data = penguins,\n      selected = \"bill_length_mm\"\n    ),\n    \n    #create dropdown selection for var on y-axis\n    varSelectInput(\n      inputId = \"var_y\",\n      label = \"Select y-axis\",\n      data = penguins,\n      selected = \"body_mass_g\"\n    )\n  ),\n  \n  br(),  #add some white space\n  \n  ### Outputs ###\n  plotOutput(\"adelie_plot\"),\n  plotOutput(\"chinstrap_plot\"),\n  plotOutput(\"gentoo_plot\")\n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create biplots based on selected variables\n  output$adelie_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Adelie',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"cadetblue\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n  output$chinstrap_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Chinstrap',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"goldenrod\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n  output$gentoo_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Gentoo',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"firebrick\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)\n\n\n\n\nUsing the included code:\n\nAdd plots to cards that include a) the species name in the header and b) islands occupied in the footer\nArrange the plots so that the Chinstrap and Gentoo are in the top row (below the dropdown menus) and have equal width, whereas the Adelie plot is on the bottom row and takes up the left two-thirds.\nAdd a table of full penguins dataset using functions from {DT} to the bottom row on the right, taking up the remaining one-third\n\n\n\n\n\n\n\nSolution for Exercise 2\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(bslib)\nlibrary(DT)\n\n\n# Determine islands occupied by each species\nspp_islands &lt;- penguins |&gt; \n  split(~species) |&gt; \n  map(~unique(.x$island) |&gt; \n        sort())\n\n\n\n#################\n### Define UI ###\n#################\n\nui &lt;- page_fillable(\n  h1(\"Penguins dashboard\"),\n  \n  ### Input widgets ###\n  \n  #create dropdown selection for var on x-axis\n  layout_columns(\n    col_widths = c(6, 6,\n                   12,\n                   6, 6,\n                   8, 4),\n    \n    varSelectInput(\n      inputId = \"var_x\",\n      label = \"Select x-axis\",\n      data = penguins,\n      selected = \"bill_length_mm\"\n    ),\n    \n    #create dropdown selection for var on y-axis\n    varSelectInput(\n      inputId = \"var_y\",\n      label = \"Select y-axis\",\n      data = penguins,\n      selected = \"body_mass_g\"\n    ),\n    \n    br(),  #add some white space\n    \n    ### Outputs ###\n    card(\n      card_header(\"Chinstrap\"),\n      plotOutput(\"chinstrap_plot\"),\n      card_footer(paste(\"Occupies\", paste(spp_islands$Chinstrap, collapse = \", \")))\n    ),\n    card(\n      card_header(\"Gentoo\"),\n      plotOutput(\"gentoo_plot\"),\n      card_footer(paste(\"Occupies\", paste(spp_islands$Gentoo, collapse = \", \")))\n    ),\n    card(\n      card_header(\"Adelie\"),\n      plotOutput(\"adelie_plot\"),\n      card_footer(paste(\"Occupies\", paste(spp_islands$Adelie, collapse = \", \")))\n    ),\n    card(\n      DT::dataTableOutput(\"tbl\"),\n      full_screen = TRUE\n    )\n  )\n)\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  # Create biplots based on selected variables\n  output$adelie_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Adelie',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"cadetblue\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n  output$chinstrap_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Chinstrap',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"goldenrod\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n  output$gentoo_plot &lt;- renderPlot({\n    ggplot(penguins[penguins$species == 'Gentoo',]) +\n      geom_point(aes(!!input$var_x, !!input$var_y), color = \"firebrick\", size = 4, alpha = 0.75) +\n      theme_bw(base_size = 20)\n  })\n  \n  \n  # Create table show all penguins data\n  output$tbl &lt;- DT::renderDataTable({\n    penguins\n  })\n  \n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)",
    "crumbs": [
      "Day 1",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Shiny app layouts</span>"
    ]
  },
  {
    "objectID": "02-01-theming-customization.html",
    "href": "02-01-theming-customization.html",
    "title": "7  Theming and customization",
    "section": "",
    "text": "Exercise 1\nUsing the included code:",
    "crumbs": [
      "Day 2",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Theming and customization</span>"
    ]
  },
  {
    "objectID": "02-01-theming-customization.html#exercise-1",
    "href": "02-01-theming-customization.html#exercise-1",
    "title": "7  Theming and customization",
    "section": "",
    "text": "Code for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\nlibrary(bslib)\nlibrary(DT)\nlibrary(thematic)\nlibrary(showtext)\n\n\n#################\n### Define UI ###\n#################\n\n\nui &lt;- page_navbar(\n  title = \"Penguins dashboard\",\n  \n  # Move navbar tabs to be right-aligned\n  nav_spacer(),\n  \n  # First page\n  nav_panel(\n    title = \"About\",\n    \n    # Title for text body\n    h1(\"Palmer penguins\"),\n    \n    # First paragraph of text\n    p(\"Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\"),\n    \n    # Second paragraph of text\n    p(\"The {palmerpenguins} package contains two datasets. Both datasets contain data for 344 penguins. There are 3 different species of penguins in this dataset, collected from 3 islands in the Palmer Archipelago, Antarctica. More info can be found at this link:\"),\n    \n    # Link to {palmerpenguins} package website\n    a(\"https://allisonhorst.github.io/palmerpenguins/\", href = \"https://allisonhorst.github.io/palmerpenguins/\"),\n    \n    # Artwork from Allison Horst\n    img(src = \"https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png\")\n  ),\n  \n  \n  # Second page\n  nav_panel(\n    title = \"Data Exploration\",\n    \n    # Content for page\n    layout_sidebar(\n      # Define sidebar inputs\n      sidebar = sidebar(\n        title = \"Inputs\",\n        \n        # Filter data by species\n        selectInput(\n          inputId = \"species\",\n          label = \"Filter by species\",\n          choices = unique(penguins$species)\n        ),\n        \n        #create dropdown selection for numeric columns\n        varSelectInput(\n          inputId = \"var\",\n          label = \"Select variable\",\n          data = dplyr::select_if(penguins, is.numeric)\n        ),\n      ),  #close sidebar\n      \n      # Main panel content\n      layout_columns(\n        col_widths = c(12, 8, 4),\n        row_heights = c(2, 3),\n        \n        # Density plot\n        card(\n          card_header(\"Density Plot\"),\n          plotOutput(\"dens\"),\n          full_screen = TRUE\n        ),\n        \n        # Table\n        card(\n          card_header(\"Data Table\"),\n          DT::dataTableOutput(\"tbl\"),\n          full_screen = TRUE\n        ),\n        \n        # Text\n        card(\n          card_header(\"Summary\"),\n          verbatimTextOutput(\"txt\"),\n          full_screen = TRUE\n        )\n      )\n    )\n  ),\n  \n  # Add dark/light mode switch to navbar\n  nav_item(input_dark_mode())\n  \n)\n\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  \n  # Create reactive object\n  penguins_react &lt;- reactive({\n    penguins |&gt; \n      filter(species == input$species)\n  })\n  \n  # Create density plot based on selection from inputs\n  output$dens &lt;- renderPlot({\n    ggplot(penguins_react()) +\n      geom_density(aes(!!input$var, fill = island), alpha = 0.6)\n  })\n  \n  \n  # Create interactive table via {DT}\n  output$tbl &lt;- DT::renderDataTable(\n    datatable(\n      data = penguins_react()\n    )\n  )\n  \n  \n  # Summarize penguins dataset for text\n  output$txt &lt;- renderPrint({\n    penguins |&gt; \n      group_by(species, island) |&gt; \n      count()\n  })\n  \n  \n  \n}\n\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)\n\n\n\n\n\n\nChoose a preset Bootswatch theme you prefer and apply to the app\nSet the base font to ‘Nunito Sans’ (Google), heading font to ‘Montserrat’ (Google), and code font to ‘Courier New’\nChange primary accent color to “#E69F00”\nEnsure that theme is also applied to ggplot2 figure\n\n\n\n\n\n\n\nSolution for Exercise 1\n\n\n\n\n\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(shiny)\nlibrary(bslib)\nlibrary(DT)\nlibrary(thematic)\nlibrary(showtext)\n\n\n#################\n### Define UI ###\n#################\n\nthematic_shiny(font = \"auto\")\n\nui &lt;- page_navbar(\n  title = \"Penguins dashboard\",\n  theme = bs_theme(bootswatch = \"pulse\",\n                   base_font = font_google('Nunito Sans'),\n                   heading_font = font_google('Montserrat'),\n                   code_font = \"Courier New\",\n                   primary = \"#E69F00\"),\n  \n  # Move navbar tabs to be right-aligned\n  nav_spacer(),\n  \n  # First page\n  nav_panel(\n    title = \"About\",\n    \n    # Title for text body\n    h1(\"Palmer penguins\"),\n    \n    # First paragraph of text\n    p(\"Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\"),\n    \n    # Second paragraph of text\n    p(\"The {palmerpenguins} package contains two datasets. Both datasets contain data for 344 penguins. There are 3 different species of penguins in this dataset, collected from 3 islands in the Palmer Archipelago, Antarctica. More info can be found at this link:\"),\n    \n    # Link to {palmerpenguins} package website\n    a(\"https://allisonhorst.github.io/palmerpenguins/\", href = \"https://allisonhorst.github.io/palmerpenguins/\"),\n    \n    # Artwork from Allison Horst\n    img(src = \"https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png\")\n  ),\n  \n  \n  # Second page\n  nav_panel(\n    title = \"Data Exploration\",\n    \n    # Content for page\n    layout_sidebar(\n      # Define sidebar inputs\n      sidebar = sidebar(\n        title = \"Inputs\",\n        \n        # Filter data by species\n        selectInput(\n          inputId = \"species\",\n          label = \"Filter by species\",\n          choices = unique(penguins$species)\n        ),\n        \n        #create dropdown selection for numeric columns\n        varSelectInput(\n          inputId = \"var\",\n          label = \"Select variable\",\n          data = dplyr::select_if(penguins, is.numeric)\n        ),\n      ),  #close sidebar\n      \n      # Main panel content\n      layout_columns(\n        col_widths = c(12, 8, 4),\n        row_heights = c(2, 3),\n        \n        # Density plot\n        card(\n          card_header(\"Density Plot\"),\n          plotOutput(\"dens\"),\n          full_screen = TRUE\n        ),\n        \n        # Table\n        card(\n          card_header(\"Data Table\"),\n          DT::dataTableOutput(\"tbl\"),\n          full_screen = TRUE\n        ),\n        \n        # Text\n        card(\n          card_header(\"Summary\"),\n          verbatimTextOutput(\"txt\"),\n          full_screen = TRUE\n        )\n      )\n    )\n  ),\n  \n  # Add dark/light mode switch to navbar\n  nav_item(input_dark_mode())\n  \n)\n\n\n\n\n#####################\n### Define server ###\n#####################\n\nserver &lt;- function(input, output, session) {\n  \n  \n  # Create reactive object\n  penguins_react &lt;- reactive({\n    penguins |&gt; \n      filter(species == input$species)\n  })\n  \n  # Create density plot based on selection from inputs\n  output$dens &lt;- renderPlot({\n    ggplot(penguins_react()) +\n      geom_density(aes(!!input$var, fill = island), alpha = 0.6)\n  })\n  \n  \n  # Create interactive table via {DT}\n  output$tbl &lt;- DT::renderDataTable(\n    datatable(\n      data = penguins_react()\n    )\n  )\n  \n  \n  # Summarize penguins dataset for text\n  output$txt &lt;- renderPrint({\n    penguins |&gt; \n      group_by(species, island) |&gt; \n      count()\n  })\n  \n  \n  \n}\n\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)",
    "crumbs": [
      "Day 2",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Theming and customization</span>"
    ]
  },
  {
    "objectID": "02-02-leaflet.html",
    "href": "02-02-leaflet.html",
    "title": "8  Interactive mapping with Leaflet",
    "section": "",
    "text": "8.1 Creating a simple Leaflet map\nAt it’s simplest, a basic Leaflet map can be created using 2 lines of code:\nwhere different options for displaying the map are added by using a “pipe” operator, such as the base R pipe (|&gt;) available in R versions 4.0.0+, or the {magrittr} pipe (%&gt;%) that’s available when loading {magrittr}, {dplyr}, or {tidyverse}. A wide range of basemaps can be chosen from and applied using the addProviderTiles() function, where the argument provider is specified using one of the basemaps available from the providers object:\nhead(providers, n = 10)\n\n$OpenStreetMap\n[1] \"OpenStreetMap\"\n\n$OpenStreetMap.Mapnik\n[1] \"OpenStreetMap.Mapnik\"\n\n$OpenStreetMap.DE\n[1] \"OpenStreetMap.DE\"\n\n$OpenStreetMap.CH\n[1] \"OpenStreetMap.CH\"\n\n$OpenStreetMap.France\n[1] \"OpenStreetMap.France\"\n\n$OpenStreetMap.HOT\n[1] \"OpenStreetMap.HOT\"\n\n$OpenStreetMap.BZH\n[1] \"OpenStreetMap.BZH\"\n\n$MapTilesAPI\n[1] \"MapTilesAPI\"\n\n$MapTilesAPI.OSMEnglish\n[1] \"MapTilesAPI.OSMEnglish\"\n\n$MapTilesAPI.OSMFrancais\n[1] \"MapTilesAPI.OSMFrancais\"\n\nleaflet() |&gt; \n  addProviderTiles(provider = providers$Esri.WorldImagery) |&gt; \n  setView(lat = 40, lng = -85, zoom = 3)\nAdditionally, there may be some instances where it’s useful to have multiple basemaps available for different purposes (such as political boundaries, roads and places of interest, as well as satellite imagery). This can be accomplished through the addition of multiple calls of addProviderTiles and the use of the layersControlOptions() function to manage the layer menu.\nleaflet() |&gt; \n  addProviderTiles(provider = providers$CartoDB.Positron, group = \"CartoDB\") |&gt; \n  addProviderTiles(provider = providers$Esri.WorldImagery, group = \"Satellite\") |&gt;\n  addProviderTiles(provider = providers$OpenStreetMap, group = \"OSM\") |&gt;\n  addLayersControl(position = \"topright\", baseGroups = c(\"CartoDB\", \"Satellite\", \"OSM\")) |&gt; \n  setView(lat = 40, lng = -85, zoom = 3)",
    "crumbs": [
      "Day 2",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interactive mapping with Leaflet</span>"
    ]
  },
  {
    "objectID": "02-02-leaflet.html#creating-a-simple-leaflet-map",
    "href": "02-02-leaflet.html#creating-a-simple-leaflet-map",
    "title": "8  Interactive mapping with Leaflet",
    "section": "",
    "text": "library(leaflet)\n\n1leaflet() |&gt;\n2  addTiles()\n\n1\n\nFunction to initialize Leaflet map\n\n2\n\nFunction to add simple OpenStreetMap (OSM) basemap layer",
    "crumbs": [
      "Day 2",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interactive mapping with Leaflet</span>"
    ]
  },
  {
    "objectID": "02-02-leaflet.html#adding-vector-layers",
    "href": "02-02-leaflet.html#adding-vector-layers",
    "title": "8  Interactive mapping with Leaflet",
    "section": "8.2 Adding vector layers",
    "text": "8.2 Adding vector layers\nAs with other GIS software, a variety of vector spatial layers can be added to Leaflet maps, including points, lines and polygons. Moreover, there are additional options when mapping markers/points, such as using icons or creating marker clusters for points near each other. These spatial layers can be either {sf} objects, {map} objects, or data.frame objects that include longitude and latitude.\nAs an example, let’s add points (via addCircleMarkers()) and polygons (via addPolygons()) to a map to show how these can be specified. Additional information on adding and customizing markers and polygons provide additional information and examples for adding these layers and including labels upon hovering or popups upon clicking spatial features.\nlibrary(rnaturalearth)\nlibrary(sf)\n\n# Load polygon layers\nca &lt;- rnaturalearth::ne_states(country = \"Canada\", returnclass = \"sf\")\n\n# Simulate fake locations to map\npts &lt;- data.frame(lon = runif(n = 50, min = -120, max = -70),\n                  lat = runif(n = 50, min = 50, max = 60))\n\n\n1leaflet(ca) |&gt;\n  addProviderTiles(provider = providers$CartoDB.Positron, group = \"CartoDB\") |&gt; \n  addProviderTiles(provider = providers$Esri.WorldImagery, group = \"Satellite\") |&gt;\n  addProviderTiles(provider = providers$OpenStreetMap, group = \"OSM\") |&gt;\n  addLayersControl(position = \"topright\",\n                   baseGroups = c(\"CartoDB\", \"Satellite\", \"OSM\"),\n2                   overlayGroups = c(\"provinces\", \"pts\")) |&gt;\n3  addPolygons(group = \"provinces\") |&gt;\n4  addCircleMarkers(data = pts,\n5                   lng = ~lon,\n                   lat = ~lat,\n                   fillColor = \"black\",\n                   fillOpacity = 1,\n                   radius = 3,\n                   stroke = FALSE,\n6                   group = \"pts\")\n\n1\n\nYou can optionally add a spatial object to the leaflet() function at the beginning, which will then be applied to the addPolygons() function in this case. Leaflet uses the spatial extent of this layer to set its own center location and zoom level.\n\n2\n\nIn order to toggle spatial layers on/off, make sure to add these group names to overlayGroups.\n\n3\n\nDefine group name for polygon layer, which is included in addLayersControl() to overlayGroups.\n\n4\n\nAlternatively (and for any other datasets), you’ll need to define these within the function using the data argument.\n\n5\n\nWhen supplying columns from a non-spatial object (such as a data.frame or other columns of an sf object), you can specify these using the ~ symbol before the name of the column (without quotation marks).\n\n6\n\nGroup name is also defined for the circle marker layer",
    "crumbs": [
      "Day 2",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interactive mapping with Leaflet</span>"
    ]
  },
  {
    "objectID": "02-02-leaflet.html#adding-raster-layers",
    "href": "02-02-leaflet.html#adding-raster-layers",
    "title": "8  Interactive mapping with Leaflet",
    "section": "8.3 Adding raster layers",
    "text": "8.3 Adding raster layers\nWe can also add raster layers to Leaflet maps as well. Currently, the latest version of {leaflet} (v2.2.2) now supports SpatRaster layers from {terra}, while also still supporting RasterLayer objects from {raster}. Given that {raster} is no longer maintained and will eventually be deprecated due to its outdated dependencies, it is recommended to use {terra} SpatRasters for these raster layers. An example layer is mapped below, but additional information on customizing the appearance of these layers can be found on the {leaflet} website.\n\nlibrary(terra)\n\n# Read sea surface temperature layer from NOAA THREDDS server (using data from 1 Jan 2025)\nr &lt;- rast(\"https://downloads.psl.noaa.gov/Datasets/noaa.oisst.v2.highres/sst.day.mean.2025.nc\")[[1]]\nr &lt;- crop(r, ext(280, 300, 35, 50))\n\n# Define color palette for raster layer\npal &lt;- colorNumeric(\"inferno\", domain = values(r), na.color = \"transparent\")\n\nleaflet() |&gt; \n  addProviderTiles(provider = providers$CartoDB.DarkMatter, group = \"CartoDB\") |&gt; \n  addLayersControl(position = \"topright\",\n                   baseGroups = \"CartoDB\",\n                   overlayGroups = \"SST\") |&gt; \n  addRasterImage(r, colors = pal, opacity = 0.8, group = \"SST\") |&gt; \n  addLegend(title = \"SST (&deg;C)\", position = \"bottomright\", pal = pal, values = values(r))",
    "crumbs": [
      "Day 2",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interactive mapping with Leaflet</span>"
    ]
  },
  {
    "objectID": "02-02-leaflet.html#integrating-in-shiny-app",
    "href": "02-02-leaflet.html#integrating-in-shiny-app",
    "title": "8  Interactive mapping with Leaflet",
    "section": "8.4 Integrating in Shiny app",
    "text": "8.4 Integrating in Shiny app\nWhile Leaflet maps have plenty of interactive functionality on their own (due to the underlying JavaScript code), there are still some other features that aren’t available, such as performing any geoprocessing steps or dynamically updating certain layers to view at a time (without overloading the map). Functions from {leaflet} make this relatively easy to accomplish, for which the standard function for adding a Leaflet map to the UI is leafletOutput(), whereas the function to store the Leaflet map on the server side is renderLeaflet(). However, there is a small wrinkle where an additional function (leafletProxy()) is required for updating reactive components of the map based on Shiny input widgets. A simple example is shown below on how to easily integrate an interactive Leaflet map into a Shiny app.\nlibrary(shiny)\nlibrary(bslib)\nlibrary(leaflet)\nlibrary(terra)\n\n# Read sea surface temperature layer from NOAA THREDDS server (using data from 1 - 10 Jan 2025)\nr &lt;- rast(\"https://downloads.psl.noaa.gov/Datasets/noaa.oisst.v2.highres/sst.day.mean.2025.nc\")[[1:10]]\nr &lt;- crop(r, ext(280, 300, 35, 50))\n\n\n\n##########\n### UI ###\n##########\n\nui &lt;- page_sidebar(title = \"Sea surface temperature in Northwest Atlantic\",\n                   theme = bs_theme(bootswatch = \"flatly\"),\n                   \n                   sidebar = sidebar(\n                     selectInput(\"date\",\n                                 \"Choose a date:\",\n                                 choices = time(r),\n                                 selected = time(r)[1])\n                   ),\n                   \n1                   leafletOutput(\"map\")\n                   )\n\n\n##############\n### Server ###\n##############\n\nserver &lt;- function(input, output, session) {\n  \n2  output$map &lt;- renderLeaflet({\n    leaflet() |&gt; \n      setView(lng = mean(ext(r[[1]])[1:2]),\n              lat = mean(ext(r[[1]])[3:4]),\n              zoom = 5) |&gt; \n      addProviderTiles(provider = providers$Esri.OceanBasemap, group = \"Ocean\") |&gt; \n      addLayersControl(position = \"topright\",\n                       baseGroups = \"Ocean\",\n                       overlayGroups = \"SST\")\n  })\n\n\n# Create reactive SpatRaster\nsst &lt;- reactive({\n  r[[time(r) == input$date]]\n})\n\n\nobserve({\n  \n  # Define color palette for raster layer\n  pal &lt;- colorNumeric(\"inferno\", domain = values(sst()),\n    na.color = \"transparent\")\n  \n3  leafletProxy(\"map\") |&gt;\n    clearControls() |&gt; \n    clearImages() |&gt; \n    addRasterImage(sst(), colors = pal, opacity = 0.8, group = \"SST\") |&gt; \n    addLegend(title = \"SST (&deg;C)\", position = \"bottomright\", pal = pal,\n              values = values(sst()))\n  \n})\n\n}\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui, server)\n\n1\n\nPlace Leaflet map on UI\n\n2\n\nRender “static” version of Leaflet map that is not reactive\n\n3\n\nUpdate base version of Leaflet map with reactive elements\n\n\nFor additional information on adding layers to Leaflet maps and customizing the look and feel of these elements, please visit the {leaflet} website. You can look through this webpage specifically for more information on integrating with Shiny.",
    "crumbs": [
      "Day 2",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interactive mapping with Leaflet</span>"
    ]
  },
  {
    "objectID": "02-02-leaflet.html#exercise-1",
    "href": "02-02-leaflet.html#exercise-1",
    "title": "8  Interactive mapping with Leaflet",
    "section": "Exercise 1",
    "text": "Exercise 1\n\n\n\n\n\n\nCode for Exercise 1\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(sf)\nlibrary(leaflet)  #v2.2.2 (CRAN)\nlibrary(leafem)  #v0.2.3.9006 (GitHub)\nlibrary(viridis)\nlibrary(shiny)\nlibrary(shinyWidgets)\n\nsource(\"../R_examples/leaflet_utils.R\")  #for function addLegend_decreasing\n\n\n\n#################\n### Load data ###\n#################\n\n# Simulated tracks\ntracks &lt;- read_csv(\"../R_examples/data/Simulated tracks.csv\")\ntracks.sf &lt;- tracks |&gt;\n  st_as_sf(coords = c('x','y'), crs = 4326)\ntracks.sf2 &lt;- tracks.sf |&gt;\n  group_by(id) |&gt;\n  summarize(do_union = FALSE) |&gt;\n  st_cast(\"MULTILINESTRING\")\n\n# Monthly SST (2021)\nsst &lt;- read_csv(\"../R_examples/data/Monthly_SST_2021.csv\")\nsst.rast &lt;- sst |&gt;\n  split(~month) |&gt;\n  purrr::map(~rast(.x[,c('x','y','sst')], type = \"xyz\", crs = \"EPSG:4326\")) |&gt;\n  rast()\n\n# Offshore wind leases\nwind &lt;- st_read(\"../R_examples/data/NE_Offshore_Wind.shp\")\nwind$State &lt;- gsub(pattern = \"Massachussets\", \"Massachusetts\", wind$State)  #fix typo\n\n\n# Define color palettes\ntracks.pal &lt;- colorFactor(\"Dark2\", factor(tracks$id))\npoly.pal &lt;- colorFactor(\"Set3\", factor(wind$State))\n\nsst.range &lt;- range(as.vector(values(sst.rast)), na.rm = TRUE)\nrast.pal2 &lt;- colorNumeric('magma',\n                          domain = sst.range,\n                          na.color = \"transparent\")\n\n\n##########\n### UI ###\n##########\n\nui &lt;- fluidPage(title = \"Animal Movement, Offshore Wind Development, and SST\",\n                \n                leafletOutput(\"mymap\", width = \"100%\", height = \"850px\"),\n                \n                absolutePanel(class = \"panel panel-default\",\n                              top = 300,\n                              left = 25,\n                              width = 250,\n                              fixed = TRUE,\n                              draggable = TRUE,\n                              height = \"auto\",\n                              \n                              h3(\"Choose which layers to map\"),\n                              pickerInput(inputId = \"tracks\",\n                                          label = \"Select tracks\",\n                                          choices = unique(tracks$id),\n                                          selected = unique(tracks$id),\n                                          multiple = TRUE),\n                              pickerInput(inputId = \"polygons\",\n                                          label = \"Select polygons by state\",\n                                          choices = unique(wind$State),\n                                          selected = unique(wind$State),\n                                          multiple = TRUE),\n                              selectInput(inputId = \"raster\",\n                                          label = \"Select month of SST\",\n                                          choices = month.abb,\n                                          selected = month.abb[1])\n                              \n                )  #close absolutePanel\n                \n)  #close fluidPage\n\n\n\n\n\n##############\n### Server ###\n##############\n\nserver &lt;- function(input, output, session) {\n  \n  #Create reactive objects based on selected input\n  tracks.out &lt;- reactive({\n    tracks.sf2 |&gt;\n      filter(id %in% input$tracks)\n  })\n  \n  wind.out &lt;- reactive({\n    wind |&gt;\n      filter(State %in% input$polygons)\n  })\n  \n  sst.out &lt;- reactive({\n    sst.rast[[which(names(sst.rast) == input$raster)]]\n  })\n  \n  \n  \n  \n  ## Create map w/ non-reactive components\n  output$mymap &lt;- renderLeaflet({\n    \n    \n    ## Static Leaflet basemap and widgets\n    leaflet() |&gt;\n      setView(lng = -73, lat = 41.5, zoom = 6) |&gt;\n      addProviderTiles(provider = providers$Esri.OceanBasemap, group = \"Ocean Basemap\",\n                       options = providerTileOptions(zIndex = -10)) |&gt;\n      addProviderTiles(provider = providers$Esri.WorldImagery, group = \"World Imagery\",\n                       options = providerTileOptions(zIndex = -10)) |&gt;\n      addProviderTiles(provider = providers$OpenStreetMap, group = \"Open Street Map\",\n                       options = providerTileOptions(zIndex = -10)) |&gt;\n      addLayersControl(baseGroups = c(\"Ocean Basemap\", \"World Imagery\", \"Open Street Map\"),\n                       overlayGroups = c(\"SST\", \"Offshore Wind Leases\", \"Tracks\"),\n                       options = layersControlOptions(collapsed = TRUE, autoZIndex = FALSE),\n                       position = \"bottomleft\") |&gt;\n      addScaleBar(position = \"bottomright\") |&gt;\n      addMeasure(position = \"topleft\",\n                 primaryLengthUnit = \"kilometers\",\n                 primaryAreaUnit = \"hectares\",\n                 activeColor = \"#3D535D\",\n                 completedColor = \"#7D4479\") |&gt;\n      addMouseCoordinates()\n    \n  })  #close renderLeaflet\n  \n  \n  \n  ## Add reactive elements to Leaflet map\n  observe({\n    \n    leafletProxy(mapId = \"mymap\") |&gt;\n      clearMarkers() |&gt;\n      clearShapes() |&gt;\n      clearImages() |&gt;\n      clearControls() |&gt;\n      addRasterImage(x = sst.out(),\n                     colors = rast.pal2,\n                     opacity = 1,\n                     group = \"SST\") |&gt;\n      addImageQuery(sst.out(), group = \"SST\") |&gt;  #add raster  query\n      addLegend_decreasing(pal = rast.pal2,\n                           values = as.vector(values(sst.rast)),\n                           title = \"SST (\\u00B0C)\",\n                           decreasing = TRUE) |&gt;\n      addPolygons(data = wind.out(),\n                  color = ~poly.pal(State),\n                  fillOpacity = 1,\n                  stroke = FALSE,\n                  label = ~paste0(\"State: \", State),\n                  group = \"Offshore Wind Leases\") |&gt;\n      addLegend(pal = poly.pal,\n                values = wind.out()$State,\n                title = \"State\",\n                opacity = 1) |&gt;\n      addPolylines(data = tracks.out(),\n                   color = ~tracks.pal(id),\n                   opacity = 0.75,\n                   weight = 2,\n                   label = ~paste0(\"ID: \", id),\n                   group = \"Tracks\") |&gt;\n      addLegend(pal = tracks.pal,\n                values = tracks.out()$id,\n                title = \"ID\",\n                position = \"topleft\")\n    \n  })  #close observe\n  \n}  #close server function\n\n\n\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui = ui, server = server)\n\n\n\n\nUsing the included code:\n\nConvert app to a sidebar layout from the fluidPage layout with absolute panel\nChange the linewidth of the tracks to a value of 4\nChange the color palette variable from ‘State’ to ‘Shape_Area’, use the ‘viridis’ palette from {viridis}, and updated the legend title while showing values in decreasing order\n\n\n\n\n\n\n\nSolution for Exercise 1\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(sf)\nlibrary(leaflet)  #v2.2.2 (CRAN)\nlibrary(leafem)  #v0.2.3.9006 (GitHub)\nlibrary(viridis)\nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(bslib)\n\nsource(\"../R_examples/leaflet_utils.R\")  #for function addLegend_decreasing\n\n\n\n#################\n### Load data ###\n#################\n\n# Simulated tracks\ntracks &lt;- read_csv(\"../R_examples/data/Simulated tracks.csv\")\ntracks.sf &lt;- tracks |&gt;\n  st_as_sf(coords = c('x','y'), crs = 4326)\ntracks.sf2 &lt;- tracks.sf |&gt;\n  group_by(id) |&gt;\n  summarize(do_union = FALSE) |&gt;\n  st_cast(\"MULTILINESTRING\")\n\n# Monthly SST (2021)\nsst &lt;- read_csv(\"../R_examples/data/Monthly_SST_2021.csv\")\nsst.rast &lt;- sst |&gt;\n  split(~month) |&gt;\n  purrr::map(~rast(.x[,c('x','y','sst')], type = \"xyz\", crs = \"EPSG:4326\")) |&gt;\n  rast()\n\n# Offshore wind leases\nwind &lt;- st_read(\"../R_examples/data/NE_Offshore_Wind.shp\")\nwind$State &lt;- gsub(pattern = \"Massachussets\", \"Massachusetts\", wind$State)  #fix typo\n\n\n# Define color palettes\ntracks.pal &lt;- colorFactor(\"Dark2\", factor(tracks$id))\npoly.pal &lt;- colorNumeric(\"viridis\", wind$Shape_Area)\n\nsst.range &lt;- range(as.vector(values(sst.rast)), na.rm = TRUE)\nrast.pal2 &lt;- colorNumeric('magma',\n                          domain = sst.range,\n                          na.color = \"transparent\")\n\n\n##########\n### UI ###\n##########\n\nui &lt;- page_sidebar(title = \"Animal Movement, Offshore Wind Development, and SST\",\n\n                   sidebar = sidebar(title = h3(\"Choose which layers to map\"),\n                                     width = 350,\n                                     \n                                     pickerInput(inputId = \"tracks\",\n                                                 label = \"Select tracks\",\n                                                 choices = unique(tracks$id),\n                                                 selected = unique(tracks$id),\n                                                 multiple = TRUE),\n                                     pickerInput(inputId = \"polygons\",\n                                                 label = \"Select polygons by state\",\n                                                 choices = unique(wind$State),\n                                                 selected = unique(wind$State),\n                                                 multiple = TRUE),\n                                     selectInput(inputId = \"raster\",\n                                                 label = \"Select month of SST\",\n                                                 choices = month.abb,\n                                                 selected = month.abb[1])\n                   ),\n                   \n                   leafletOutput(\"mymap\", width = \"100%\", height = \"850px\")\n)  #close page_sidebar\n\n\n\n\n\n##############\n### Server ###\n##############\n\nserver &lt;- function(input, output, session) {\n  \n  #Create reactive objects based on selected input\n  tracks.out &lt;- reactive({\n    tracks.sf2 |&gt;\n      filter(id %in% input$tracks)\n  })\n  \n  wind.out &lt;- reactive({\n    wind |&gt;\n      filter(State %in% input$polygons)\n  })\n  \n  sst.out &lt;- reactive({\n    sst.rast[[which(names(sst.rast) == input$raster)]]\n  })\n  \n  \n  \n  \n  ## Create map w/ non-reactive components\n  output$mymap &lt;- renderLeaflet({\n    \n    \n    ## Static Leaflet basemap and widgets\n    leaflet() |&gt;\n      setView(lng = -73, lat = 41.5, zoom = 6) |&gt;\n      addProviderTiles(provider = providers$Esri.OceanBasemap, group = \"Ocean Basemap\",\n                       options = providerTileOptions(zIndex = -10)) |&gt;\n      addProviderTiles(provider = providers$Esri.WorldImagery, group = \"World Imagery\",\n                       options = providerTileOptions(zIndex = -10)) |&gt;\n      addProviderTiles(provider = providers$OpenStreetMap, group = \"Open Street Map\",\n                       options = providerTileOptions(zIndex = -10)) |&gt;\n      addLayersControl(baseGroups = c(\"Ocean Basemap\", \"World Imagery\", \"Open Street Map\"),\n                       overlayGroups = c(\"SST\", \"Offshore Wind Leases\", \"Tracks\"),\n                       options = layersControlOptions(collapsed = TRUE, autoZIndex = FALSE),\n                       position = \"bottomleft\") |&gt;\n      addScaleBar(position = \"bottomright\") |&gt;\n      addMeasure(position = \"topleft\",\n                 primaryLengthUnit = \"kilometers\",\n                 primaryAreaUnit = \"hectares\",\n                 activeColor = \"#3D535D\",\n                 completedColor = \"#7D4479\") |&gt;\n      addMouseCoordinates()\n    \n  })  #close renderLeaflet\n  \n  \n  \n  ## Add reactive elements to Leaflet map\n  observe({\n    \n    leafletProxy(mapId = \"mymap\") |&gt;\n      clearMarkers() |&gt;\n      clearShapes() |&gt;\n      clearImages() |&gt;\n      clearControls() |&gt;\n      addRasterImage(x = sst.out(),\n                     colors = rast.pal2,\n                     opacity = 1,\n                     group = \"SST\") |&gt;\n      addImageQuery(sst.out(), group = \"SST\") |&gt;  #add raster  query\n      addLegend_decreasing(pal = rast.pal2,\n                           values = as.vector(values(sst.rast)),\n                           title = \"SST (\\u00B0C)\",\n                           decreasing = TRUE) |&gt;\n      addPolygons(data = wind.out(),\n                  color = ~poly.pal(Shape_Area),\n                  fillOpacity = 1,\n                  stroke = FALSE,\n                  label = ~paste0(\"Area: \", Shape_Area),\n                  group = \"Offshore Wind Leases\") |&gt;\n      addLegend_decreasing(pal = poly.pal,\n                           values = wind.out()$Shape_Area,\n                           title = \"Area (km&lt;sup&gt;2&lt;/sup&gt;)\",\n                           decreasing = TRUE,\n                           opacity = 1) |&gt;\n      addPolylines(data = tracks.out(),\n                   color = ~tracks.pal(id),\n                   opacity = 0.75,\n                   weight = 4,\n                   label = ~paste0(\"ID: \", id),\n                   group = \"Tracks\") |&gt;\n      addLegend(pal = tracks.pal,\n                values = tracks.out()$id,\n                title = \"ID\",\n                position = \"topleft\")\n    \n  })  #close observe\n  \n}  #close server function\n\n\n\n\n\n###############\n### Run app ###\n###############\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Day 2",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interactive mapping with Leaflet</span>"
    ]
  }
]