---
title: "Introduction to Shiny"
---

```{=html}
<iframe class="slide-deck" src="Day1/slides/Intro to Shiny.html" height="420" width="750" style="border: 1px solid #2e3846;"></iframe>
```
{{< fa brands github size=2x >}} [GitHub repo folder](https://github.com/Physalia86/Introduction-to-R-Shiny-course/tree/main/Day1/R_examples) with example R scripts for creating Shiny apps


There is a wide array of online materials that provide extensive descriptions of Shiny. Rather than reinvent the wheel, please refer to the list of resources from the [Materials](materials.qmd) page. The [Shiny for R](https://shiny.posit.co/r/getstarted/) tutorial and [Mastering Shiny](https://mastering-shiny.org) are good places to start.

<br>

## Exercise 1 {.unnumbered}

::: {.callout-note collapse=false}
## Code for Exercise 1

```{r}
#| eval: false
library(shiny)
library(bslib)

# Define user interface (UI)
ui <- page_sidebar(
  title = "My app",
  sidebar = sidebar(
    title = "Inputs"
  ),
  "Main content area for outputs"
)

# Define server
server <- function(input, output, session) {
  
  # Add code here for doing computations and producing output
}


# Run app
shinyApp(ui, server)

```
:::

Using the {bslib} Shiny app skeleton:

 1. Change title to "Skeleton Shiny app"
 2. Add a brief sentence to place under the sidebar title
 3. Change the text shown for the main panel
 

::: {.callout-tip collapse=true}
## Solution for Exercise 1

```{r}
#| eval: false
library(shiny)
library(bslib)

# Define user interface (UI)
ui <- page_sidebar(
  title = "Skeleton Shiny app",
  sidebar = sidebar(
    title = "Inputs",
    "Additional info providing context to the widgets and/or app use."
  ),
  "Main content area for outputs, which can include plots, images, tables, and text!"
)

# Define server
server <- function(input, output, session) {
  
  # Add code here for doing computations and producing output
}


# Run app
shinyApp(ui, server)

```
:::

<br>


## Exercise 2 {.unnumbered}

::: {.callout-note collapse=false}
## Code for Exercise 2

```{r}
#| eval: false
library(palmerpenguins)
library(ggplot2)
library(shiny)
library(bslib)


# Define UI
ui <- page_sidebar(
  title = "Penguins dashboard",
  
  # Define sidebar inputs
  sidebar = sidebar(
    title = "Histogram controls",
    
    #create dropdown selection for numeric columns
    varSelectInput(
      inputId = _____,
      label = "Select variable",
      data = dplyr::select_if(penguins, is.numeric)
    ),
    
    #create slider input for histogram
    sliderInput("bins", "Number of bins", min = 3, max = 100, value = 30, step = 1)
  ),  #close sidebar
  
  # Main panel content
  plotOutput("figure")
  
)  #close page_sidebar



# Define server
server <- function(input, output, session) {
  
  # Create histogram based on selection from inputs
  output$_____ <- renderPlot({
    ggplot(penguins) +
      geom_histogram(aes(!!input$variable), color = "black", fill = "cadetblue",
                     bins = input$bins) +
      theme_bw(base_size = 20)
  })
  
}


# Run app
shinyApp(ui, server)

```
:::

Using the included code:

 1. Fill in the blank for the missing inputId
 2. Fill in the blank for the missing output object
 3. Change the slider values to have a minimum of 2, maximum of 10, and a default starting value of 5
 

::: {.callout-tip collapse=true}
## Solution for Exercise 2

```{r}
#| eval: false
library(palmerpenguins)
library(ggplot2)
library(shiny)
library(bslib)


# Define UI
ui <- page_sidebar(
  title = "Penguins dashboard",
  
  # Define sidebar inputs
  sidebar = sidebar(
    title = "Histogram controls",
    
    #create dropdown selection for numeric columns
    varSelectInput(
      inputId = "variable",
      label = "Select variable",
      data = dplyr::select_if(penguins, is.numeric)
    ),
    
    #create slider input for histogram
    sliderInput("bins", "Number of bins", min = 2, max = 10, value = 5, step = 1)
  ),  #close sidebar
  
  # Main panel content
  plotOutput("figure")
  
)  #close page_sidebar



# Define server
server <- function(input, output, session) {
  
  # Create histogram based on selection from inputs
  output$figure <- renderPlot({
    ggplot(penguins) +
      geom_histogram(aes(!!input$variable), color = "black", fill = "cadetblue",
                     bins = input$bins) +
      theme_bw(base_size = 20)
  })
  
}


# Run app
shinyApp(ui, server)

```
:::